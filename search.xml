<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[程序优化初试]]></title>
    <url>%2Fpost%2F4b571416.html</url>
    <content type="text"><![CDATA[关于程序优化我们平时都写程序，但是不同的人写出来的代码质量却参差不齐，从如下几方面考虑： 程序的可扩展性 程序的健壮性 程序的性能 今天我来就来说一下程序的性能。 最近在读csapp(深入理解计算机系统),读到第五章的时候觉得作者写的很棒， 于是总结一下，分享给大家。 首先介绍一下程序是如何在计算机中运行的，我们编写的代码，最终会以机器码在计算机中运行。以C语言为例， C语言-&gt;编译得到汇编代码-&gt;优化汇编代码-&gt;汇编代码为目标文件-&gt;链接程序为可执行文件 我们今天主要关注前三个阶段，前三个阶段是顺序的，C语言决定了汇编代码长什么样子，汇编代码决定了能否被编译器优化，因此C语言的写法就显得尤为重要了。 我们现在主要介绍一下书中说的集中优化 消除低效率循环试想，有如下函数： 12345int test(char* c)&#123; for(int i = 0; i &lt; strlen(c); i++)&#123; //do something &#125;&#125; 大家想一想，上面的代码有什么问题吗？ 12345678910LBB0_2: ## =&gt;This Inner Loop Header: Depth=1 xorl %eax, %eax movq %r14, %rdi movl %ebx, %esi callq _printf incq %rbx movq %r15, %rdi callq _strlen cmpq %rbx, %rax ja LBB0_2 上图是代码被编译成汇编语言之后的关于循环的一部分，从中可以看到 cmpq之后会再次跳转到LLB0_2 ，而LLB0_2 会再次callq _strlen，call代价很高，所以我们针对这一点对上述程序进行优化， 123456int test(char* c)&#123; int length = strlen(c) for(int i = 0; i &lt; length; i++)&#123; //do something &#125;&#125; 上述代码的call _strlen被挪到了循环外面，提高了程序性能。 消除不必要的内存引用内存引用需要寻址， 内存虽然比外部IO快很多，但是相对于CPU内的寄存器来说还是要慢很多的。所以要尽量减少程序中不合理的内存引用。考虑如下代码: 12345678910#include &lt;stdio.h&gt;#include &lt;string.h&gt;int test(int* dest, int n)&#123; for(int i = 0; i &lt; n; i++)&#123; //do something *dest = *dest + 100; &#125; return 0;&#125; 上面的代码看起来逻辑上是没有问题的，但是我们仔细思考一下c代码下面的运行逻辑： c指针本质上是进行一次内存寻址，上面咱们也说过内存寻址相对于寄存器来说太慢了，所以我们可以将上述代码优化一下： 123456789101112#include &lt;stdio.h&gt;#include &lt;string.h&gt;int test(int* dest, int n)&#123; int acc = *dest; for(int i = 0; i &lt; n; i++)&#123; //do something acc = acc + 100; &#125; *dest = acc; return 0;&#125; 经过这么改造， 将对内存的引用移到了循环外部， 如果n很大的话，对性能提升来说还是很好的。]]></content>
      <tags>
        <tag>程序优化 csapp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[arts-04-07]]></title>
    <url>%2Fpost%2Fc4543e60.html</url>
    <content type="text"><![CDATA[第四周这周简直忙炸，但是还是不能放弃学习滴~ 接下来 我们进行这周的 arts 啦~！ Review goLang Totorial本周学习的是 Go 的常量。常量就像是石头里蹦出来的孙悟空，一惊出世就不可再改变了，头铁的很。 123456789101112package mainimport ( "fmt" "math")func main() &#123; fmt.Println("Hello, playground") var a = math.Sqrt(4)//allowed const b = math.Sqrt(4)//not allowed&#125; 还有需要注意的一点事 (常量)constant 必须是在编译器就被确定的,因此上述对常量进行函数赋值是不允许的 我们知道 go 是强类型语言，那么如下 1const a = "test" a 是什么类型呢？ 答案每个 constant 都有一个默认的类型,这和它的值有关系。当他被用到的时候，会通过自身的值转化为对应的类型(如果可以转化的话) AlgorithmMerge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists. 这道题 tip 是初始化一个-1 的 Node 遍历完之后再去掉就 ok 了 1234567891011121314151617181920212223242526272829303132class Solution &#123; public ListNode mergeTwoLists(ListNode l1, ListNode l2) &#123; ListNode p = l1, q = l2; ListNode res = new ListNode(-1); ListNode ret = res; ret = res; while (p != null &amp;&amp; q != null) &#123; if (p.val &lt;= q.val) &#123; res.next = new ListNode(p.val); p = p.next; &#125;else&#123; res.next = new ListNode(q.val); q = q.next; &#125; res = res.next; &#125; while(p != null)&#123; res.next = new ListNode(p.val); p = p.next; res = res.next; &#125; while(q != null)&#123; res.next = new ListNode(q.val); q = q.next; res = res.next; &#125; ret = ret.next; return ret; &#125;&#125; S《王者荣耀》技术总监复盘回炉历程讲了王者荣耀成长过程中的一些历程， 很有启发性。]]></content>
      <categories>
        <category>[object Object]</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[腾讯云服务器的坑-iptables]]></title>
    <url>%2Fpost%2F85230e64.html</url>
    <content type="text"><![CDATA[腾讯云服务器的坑-iptablesiptables 没法加载 nat 模块今天安装 docker 的时候发现启动失败， journalctl -u docker.service 发现无法通过 iptables 设置 nat google 之后发现这位大佬也遇到了这个问题， 有可能是因为 linux 禁用了一些系统模块 Docker 安装指南以及使用 GPU 详细细节可以看大佬的文章 123/etc/modprobe.d/blacklist.conf/etc/modprobe.d/connectiontracking.conf 这两个文件就是模块黑名单，去掉对应的 mod 即可]]></content>
      <tags>
        <tag>iptables</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[arts-04-01]]></title>
    <url>%2Fpost%2F2d379b55.html</url>
    <content type="text"><![CDATA[third artsR golang 学习这一节我们学习 golang 的基本类型 bool 类型 数值类型 字符串类型 bool 类型和别的编程语言中的一样，有true 和 false两种 123456789101112package mainimport "fmt"fun main() &#123; a:=true b:=false //c 为 trhe c:= a || b //d 为false d:= a &amp;&amp; b&#125; 整型数字类型和他们可以表示的范围为 int8: -127~128 int16: -32768~32767 int32: -2147483648~2147483647 int64: -9223372036854775808~9223372036854775807 int: 根据操作系统不同会代表 int32 或者 int64 在上述数值类型前面加u如uint8可以表示无符号数 浮点型数字类型有: float32 float64 go 还可以表示复数类型: complex64 complex128 1c := 6 + 7i 还有两个数值类型 byte 和 rune 分别是 uint8 和 int32的别称 字符串类型 字符串类型可以看成是连续的byte 本文还介绍了关于类型转换的一些问题,go 不会进行隐式的类型转换，必须有显式(explicit)的类型转换。 本次的 golang 学习到此结束， 期待下周~！ ALongest Substring Without Repeating Characters 这道题经过仔细的思考，发现了比较好的思路 12345678910111213class Solution &#123; public int lengthOfLongestSubstring(String s) &#123; int[] m = new int[256]; Arrays.fill(m, -1); int res = 0, left = -1; for (int i = 0; i &lt; s.length(); i++) &#123; left = Math.max(left, m[s.charAt(i)]); m[s.charAt(i)] = i; res = Math.max(res, i - left); &#125; return res; &#125;&#125; 思路是用一个 256 的 int 数组来表示 Character，然后从左到右走一遍String s 过程中找最远的距离时间复杂度是 O(n), 空间复杂度为常量 O(1) T这周学习到一个关于 javascript 的小技巧 123456789101112// 打印函数运行时间const slowFunction = number =&gt; &#123; console.time("slowFunction"); console.timeEnd("slowFunction");&#125;;console.time();for (i = 0; i &lt; 100000; ++i) &#123; slowFunction(i);&#125;console.timeEnd(); 可以检测出来循环每一步运行了多长时间]]></content>
      <categories>
        <category>[object Object]</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[java LinkedList]]></title>
    <url>%2Fpost%2F5e9e4bd.html</url>
    <content type="text"><![CDATA[java Linked List 源码学习嘿嘿，其实最近一直在看java相关的东西，上下班通勤的时候再看王争老师的数据结构，正好看到链表这一章，就自己实现了一下链表。 完了又去看了一下jdk对链表的实现。发现java对链表的实现还是挺优雅的。通过接口，可以让实现的链表扩展其他功能，比如Deque等 java的链表继承于AbstractSequentialList 并实现了 List Deque Clonable java.io.Serializable 接口 提供两个构造函数，默认的构造函数和一个接受Collection &lt;? extends E&gt;的构造函数 Collection &lt;? extends E&gt;的构造函数内部调用了addAll方法来进行链表的初始化 如下是java addAll的代码 123456789101112131415161718192021222324252627282930313233343536373839404142@Overridepublic boolean addAll(int index, Collection&lt;? extends E&gt; c) &#123; checkPositionIndex(index); Object[] a = c.toArray(); int newNum = a.length; if (newNum == 0) &#123; return false; &#125; Node&lt;E&gt; pred, succ; if (index == size) &#123; succ = null; pred = last; &#125; else &#123; succ = node(index); pred = succ.prev; &#125; for (Object o : a) &#123; E e = (E) o; Node&lt;E&gt; newNode = new Node&lt;&gt;(pred, e, null); if (pred == null) &#123; first = newNode; &#125; else &#123; pred.next = newNode; &#125; pred = newNode; &#125; if (succ == null) &#123; last = pred; &#125; else &#123; pred.next = succ; succ.prev = pred; &#125; size += newNum; modCount++; return true;&#125; LinkList提供了linkFirst linkLast LinkBefore 来供LinkList进行内部的修改 对LinkList进行添加操作的有 add push 它俩都是对addFirst的调用， 2️而addFirst是对LinkFirst的调用, LinkFirst代码如下 1234567891011121314private void linkFirst(E e) &#123; final Node&lt;E&gt; f = first; final Node&lt;E&gt; newNode = new Node&lt;&gt;(null, e, f); first = newNode; if (f == null) &#123; //考虑链表为空的情况 last = newNode; &#125; else &#123; f.prev = newNode; &#125; size++; modCount++;&#125; 删除的操作和添加类似，在此不做赘述。 可以打开jdk源码来看一下，都很简单。 还有值得一提的是LinkedList里面有一个私有类ListItr用于对LinkedList的遍历， ListItr 实现了 ListIterator接口，可以方便的对LinkedList进行遍历]]></content>
  </entry>
  <entry>
    <title><![CDATA[arts_03_25]]></title>
    <url>%2Fpost%2F94241583.html</url>
    <content type="text"><![CDATA[arts second weekRThis week, let’s learn some basic syntax about go! First of all, we’ll talk about variable of go. Variable is a pointer (or a name) given to a memory location. You can define a variable just like below. 1var age int int means that age is an integer variable.or you can omit the type word if you initial the variable like below.1var age = 15 go will know that age is type of int, the other way to define a variable is: 1age := 15 This way, you can declare and initial variable by only on line. Multiple variable declaration: you can declare multiple variable.1234567891011var age, height intvar h, w = 100, 50var( age int x = 1 str = "string")name, z := "string", 30 A1234567891011121314151617181920212223242526/** * Definition for singly-linked list. * public class ListNode &#123; * int val; * ListNode next; * ListNode(int x) &#123; val = x; &#125; * &#125; */class Solution &#123; public ListNode removeNthFromEnd(ListNode head, int n) &#123; if(head.next == null) return null; ListNode p = head; ListNode flag = head; for(; n&gt;0; n--)&#123; p = p.next; &#125; if(p == null) return head.next; while(p.next != null)&#123; p = p.next; flag = flag.next; &#125; flag.next = flag.next.next; return head; &#125;&#125; TI’m using markdown recently, and I found an issue that I must go one pic Bed to upload one pic and then I got the link of the pic. This is a terrible experience. So I found One Big guy – PicGo. The software is saviour.Pictures in this post is generate by PicGo! SThis week learn java LinkedList~! java LinkedList]]></content>
      <categories>
        <category>arts</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java 入门 -- 基本程序设计]]></title>
    <url>%2Fpost%2Ff1ba796c.html</url>
    <content type="text"><![CDATA[Java 入门 – 基本程序设计java程序基于类。一个基础的java程序如下:12345public class HelloWorld&#123; public static void main(String[] args)&#123; System.out.println("Hello World"); &#125;&#125; 以上就是一个简单的Java程序。很简单~ 🌝 Java是强类型语言，所以在声明变量的时候需要指定变量的类型。 Java数值类型java的数值类型有如下几种类型:(图片摘自《Java程序设计》) 书中一个计算分秒的小程序12345678910111213141516171819202122package chapter.one;import java.util.Scanner;/** * * @author zrb */public class Welcome &#123; public static void main(String[] args)&#123; Scanner input = new Scanner(System.in); System.out.print("请输入秒数："); Integer second = input.nextInt(); Integer minute = second / 60; Integer secondLeft = second % 60; System.out.println("对应的分秒数为： " + minute + "分" + secondLeft + "秒"); &#125;&#125;]]></content>
      <categories>
        <category>java</category>
        <category>java语言程序设计</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[arts_03_18]]></title>
    <url>%2Fpost%2Fc1b83afd.html</url>
    <content type="text"><![CDATA[goal 1A add two numbers 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576/** * Definition for singly-linked list. * public class ListNode &#123; * int val; * ListNode next; * ListNode(int x) &#123; val = x; &#125; * &#125; */class Solution &#123; public ListNode addTwoNumbers(ListNode l1, ListNode l2) &#123; ListNode ret = new ListNode(0); ListNode res = ret; ListNode p1 = l1; ListNode p2 = l2; int flag = 0; while(p1 != null &amp;&amp; p2 != null)&#123; res.val = p1.val + p2.val; if(flag == 1)&#123; res.val = res.val + 1; flag = 0; &#125; if(res.val &gt;= 10)&#123; res.val = res.val - 10; flag = 1; &#125; if(p1.next != null || p2.next != null || flag == 1 )&#123; res.next = new ListNode(0); res = res.next; &#125; p1 = p1.next; p2 = p2.next; &#125; if(flag == 1)&#123; res.val = 1; flag = 0; &#125; while(p1 != null)&#123; res.val = p1.val + res.val; if(res.val &gt;= 10)&#123; res.val = res.val -10; flag = 1; &#125; if(p1.next != null || flag == 1)&#123; res.next = new ListNode(0); res = res.next; if(flag == 1)&#123; res.val = 1; flag = 0; &#125; &#125; p1 = p1.next; &#125; while(p2 != null)&#123; res.val = p2.val + res.val; if(res.val &gt;= 10)&#123; res.val = res.val -10; flag = 1; &#125; if(p2.next != null || flag == 1)&#123; res.next = new ListNode(0); res = res.next; if(flag == 1)&#123; res.val = 1; flag = 0; &#125; &#125; p2 = p2.next; &#125; return ret; &#125;&#125; 这个题目比较简单，但是做的时候还是有些情况没有考虑到，有如下几点: 在第一次同步遍历完两条链表的时候，之后没有考虑最后一次如果进位的情况 没有考虑单条遍历最后一步的进位情况 得到教训，以后做题的时候还是先把题目仔细想一遍再动手，最好画出来。 R go语言介绍与hello worldgo tutorial这一系列介绍了go 什么是gogo是google推出一种静态强类型的编译型语言。 为何选择go?: 天生支持并发, 编写并发很简单, go通过Goroutines和channels来完成并发 go是编译型语言，源码会被编译成机器码运行，效率比解释性语言高很多。 go文档简单 go编译器支持静态链接,所有依赖库都会被链接到为一个二进制可执行文件，部署方便，移植性也还不错。 安装安装地址 按照步骤一步一步安装的 以上就是这篇文章的总结~ T tips 发现了oh-my-zsh 的一个好用的插件 autojump ！ 同样作用的插件还有’z’ 很好用，作用是可以快捷的跳转到曾经cd过的目录 截图如下 S开启我的java学习之旅~Java 入门 – 基本程序设计]]></content>
      <categories>
        <category>arts</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[redis-zskiplist - 带你搞懂redis]]></title>
    <url>%2Fpost%2F27c5a942.html</url>
    <content type="text"><![CDATA[skiplist跳跃表有两个关键的结构skiplist和skiplistNode skiplist 记录了跳跃表里面包含节点的数量，skiplistNode包含了每个节点的层数 zslCreate12345678910111213141516171819202122232425zskiplist *zslCreate(void) &#123; int j; zskiplist *zsl; // 分配空间 zsl = zmalloc(sizeof(*zsl)); // 设置高度和起始层数 zsl-&gt;level = 1; zsl-&gt;length = 0; // 初始化表头节点 // T = O(1) zsl-&gt;header = zslCreateNode(ZSKIPLIST_MAXLEVEL,0,NULL); for (j = 0; j &lt; ZSKIPLIST_MAXLEVEL; j++) &#123; zsl-&gt;header-&gt;level[j].forward = NULL; zsl-&gt;header-&gt;level[j].span = 0; &#125; zsl-&gt;header-&gt;backward = NULL; // 设置表尾 zsl-&gt;tail = NULL; return zsl;&#125; 1234567891011zskiplistNode *zslCreateNode(int level, double score, robj *obj) &#123; // 分配空间 zskiplistNode *zn = zmalloc(sizeof(*zn)+level*sizeof(struct zskiplistLevel)); // 设置属性 zn-&gt;score = score; zn-&gt;obj = obj; return zn;&#125; zslCreateNode创建了一个zskiplistNode并进行了初始化 未完待续]]></content>
      <categories>
        <category>redis</category>
        <category>带你搞懂redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>source code</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[redis字典详解 - 带你搞懂redis]]></title>
    <url>%2Fpost%2F278b8e98.html</url>
    <content type="text"><![CDATA[字典结构字典的结构如图所示 一个字典结构(dict)里面记录了dictType,有两个哈希表(为了rehash)，rehashidx记录了当前rehash的进度 dictEntry结构dictEntry 结构内包含: key v next key 储存了键， v储存了值，v的结构如下所示，v可以储存一个指针、一个uint64_t的数，或者一个int64_t的值, next则是为了解决hash冲突指向下一个具有相同hash值的实体节点 12345union &#123; void *val; uint64_t u64; int64_t s64; &#125; v; dictht 结构dictht结构内包含: table size sizemask used table是一个dictEntry的数组，size记录了table数组的大小，sizemask为哈希表大小掩码为size-1，used记录了table中已有节点的数量 dictType 结构dictType 结构包含: dictType里面包含了针对dict类型的特定的操作函数，如hash计算函数(hashFunction)，键复制函数(keyDup)等等. dict 结构dict是字典的数据结构，dict包含: type privdata dictht[2] rehashidx iterators type定义了dict的类型(操作dict的一系列方法) privdata是dict的一些私有数据(用来给特定的类型特定函数的可选参数) dictht是字典哈希表，有两个是为了进行rehash rehashidx记录了rehash进度,当前没有进行rehash的时候为-1 iterators是当前字典正在运行的安全迭代器的数量 字典元素添加过程解析向字典中加入元素的过程向字典中加入元素的过程如下图所示： 添加过程中出现键冲突？如果在上述过程中计算出的index在对应的ht的table中已经有元素了，redis此时会在该元素前面插入一个元素实体键值为要插入的键值. 字典rehash字典rehash过程字典会让本身的负载因子(used/size)维持在一个合理的值，如果负载因子过大，会降低字典的效率，过小会浪费宝贵内存空间。 字段通过rehash来保持负载因子合理，过程如下 为dict的ht[1]分配空间，如果是扩大操作，分配的空间大小为第一个大于ht[0].used*2的2^n的值，如果是收缩操作，大小为第一个大于ht[0].used的2^n的值 将ht[0]所有键值对rehash到ht[1] 释放ht[0],将ht[1]设置为ht[0],并在ht[1]创建一个新的空哈希表 触发字典rehash的条件 字典的负载因子大于等于1并且服务器没有在执行BGSAVE或者BGREWITEAOF 字典的负载因子大于5并且服务器在执行BGSAVE或者BGREWITEAOF 字典负载因子小于0.1，会执行收缩操作 dict渐进式rehashrehash不是一次性完成的，在rehash的时候字典会同时操作(delete,find,update)两个hash表。 如：1234567891011121314151617dictEntry *dictFind(dict *d, const void *key)&#123; dictEntry *he; unsigned int h, idx, table; // 字典（的哈希表）为空 if (d-&gt;ht[0].size == 0) return NULL; /* We don't have a table at all */ // 如果条件允许的话，进行单步 rehash if (dictIsRehashing(d)) _dictRehashStep(d);//！！！！！！注意在这里进行了rehash单步操作 // 计算键的哈希值 h = dictHashKey(d, key); // 在字典的哈希表中查找这个键 // T = O(1) //........等等&#125; 结尾字典部分就详解完毕了，如果后续有补充，会在本文进行修改添加，欢迎关注哦~~]]></content>
      <categories>
        <category>redis</category>
        <category>带你搞懂redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>source code</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[redis-adlist - 带你搞懂redis]]></title>
    <url>%2Fpost%2F6622af18.html</url>
    <content type="text"><![CDATA[AdlistlistNode123456789101112typedef struct listNode &#123; // 前置节点 struct listNode *prev; // 后置节点 struct listNode *next; // 节点的值 void *value;&#125; listNode; 双端链表结构 list123456789101112131415161718192021222324/* * 双端链表结构 */typedef struct list &#123; // 表头节点 listNode *head; // 表尾节点 listNode *tail; // 节点值复制函数 void *(*dup)(void *ptr); // 节点值释放函数 void (*free)(void *ptr); // 节点值对比函数 int (*match)(void *ptr, void *key); // 链表所包含的节点数量 unsigned long len;&#125; list; listCreate123456789101112131415161718192021222324/* * 创建一个新的链表 * * 创建成功返回链表，失败返回 NULL 。 * * T = O(1) */list *listCreate(void)&#123; struct list *list; // 分配内存 if ((list = zmalloc(sizeof(*list))) == NULL) return NULL; // 初始化属性 list-&gt;head = list-&gt;tail = NULL; list-&gt;len = 0; list-&gt;dup = NULL; list-&gt;free = NULL; list-&gt;match = NULL; return list;&#125; listAddNodeHead12345678910111213141516171819202122232425262728293031323334353637383940414243/* Add a new node to the list, to head, contaning the specified 'value' * pointer as value. * * On error, NULL is returned and no operation is performed (i.e. the * list remains unaltered). * On success the 'list' pointer you pass to the function is returned. *//* * 将一个包含有给定值指针 value 的新节点添加到链表的表头 * * 如果为新节点分配内存出错，那么不执行任何动作，仅返回 NULL * * 如果执行成功，返回传入的链表指针 * * T = O(1) */list *listAddNodeHead(list *list, void *value)&#123; listNode *node; // 为节点分配内存 if ((node = zmalloc(sizeof(*node))) == NULL) return NULL; // 保存值指针 node-&gt;value = value; // 添加节点到空链表 if (list-&gt;len == 0) &#123; list-&gt;head = list-&gt;tail = node; node-&gt;prev = node-&gt;next = NULL; // 添加节点到非空链表 &#125; else &#123; node-&gt;prev = NULL; node-&gt;next = list-&gt;head; list-&gt;head-&gt;prev = node; list-&gt;head = node; &#125; // 更新链表节点数 list-&gt;len++; return list;&#125; 若干函数123456789101112list *listAddNodeTail(list *list, void *value);list *listInsertNode(list *list, listNode *old_node, void *value, int after);void listDelNode(list *list, listNode *node);listIter *listGetIterator(list *list, int direction);listNode *listNext(listIter *iter);void listReleaseIterator(listIter *iter);list *listDup(list *orig);listNode *listSearchKey(list *list, void *key);listNode *listIndex(list *list, long index);void listRewind(list *list, listIter *li);void listRewindTail(list *list, listIter *li);void listRotate(list *list);]]></content>
      <categories>
        <category>redis</category>
        <category>带你搞懂redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>source code</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[redis-sds - 带你搞懂redis]]></title>
    <url>%2Fpost%2F9b1040fb.html</url>
    <content type="text"><![CDATA[Sdssdshdr 保存字符串对象的结构1234567891011121314/* * 保存字符串对象的结构 */struct sdshdr &#123; // buf 中已占用空间的长度 int len; // buf 中剩余可用空间的长度 int free; // 数据空间 char buf[];&#125;; sdsnewlen12345678910111213141516171819202122232425262728293031sds sdsnewlen(const void *init, size_t initlen) &#123; struct sdshdr *sh; // 根据是否有初始化内容，选择适当的内存分配方式 // T = O(N) if (init) &#123; // zmalloc 不初始化所分配的内存 sh = zmalloc(sizeof(struct sdshdr)+initlen+1); &#125; else &#123; // zcalloc 将分配的内存全部初始化为 0 sh = zcalloc(sizeof(struct sdshdr)+initlen+1); &#125; // 内存分配失败，返回 if (sh == NULL) return NULL; // 设置初始化长度 sh-&gt;len = initlen; // 新 sds 不预留任何空间 sh-&gt;free = 0; // 如果有指定初始化内容，将它们复制到 sdshdr 的 buf 中 // T = O(N) if (initlen &amp;&amp; init) memcpy(sh-&gt;buf, init, initlen); // 以 \0 结尾 sh-&gt;buf[initlen] = '\0'; // 返回 buf 部分，而不是整个 sdshdr return (char*)sh-&gt;buf;&#125; sdsempty 创建一个只包含””的sds123sds sdsempty(void) &#123; return sdsnewlen("",0);&#125; sdsnew12345/* Create a new sds string starting from a null termined C string. */sds sdsnew(const char *init) &#123; size_t initlen = (init == NULL) ? 0 : strlen(init); return sdsnewlen(init, initlen);&#125; sdsfree1234567891011/* * 释放给定的 sds * * 复杂度 * T = O(N) *//* Free an sds string. No operation is performed if 's' is NULL. */void sdsfree(sds s) &#123; if (s == NULL) return; zfree(s-sizeof(struct sdshdr));&#125; sdsclear 不释放sds的前提下重置sds123456789101112void sdsclear(sds s) &#123; // 取出 sdshdr struct sdshdr *sh = (void*) (s-(sizeof(struct sdshdr))); // 重新计算属性 sh-&gt;free += sh-&gt;len; sh-&gt;len = 0; // 将结束符放到最前面（相当于惰性地删除 buf 中的内容） sh-&gt;buf[0] = '\0';&#125; sdsMakeRoomFor 给s增加内存，若本地址的内存不足，如果新长度小于SDS_MAX_PREALLOC， 则变成二倍，否则加上SDS_MAX_PREALLOC，这里主要是为了避免重复扩容造成的浪费123456789101112131415161718192021222324252627282930313233343536373839sds sdsMakeRoomFor(sds s, size_t addlen) &#123; struct sdshdr *sh, *newsh; // 获取 s 目前的空余空间长度 size_t free = sdsavail(s); size_t len, newlen; // s 目前的空余空间已经足够，无须再进行扩展，直接返回 if (free &gt;= addlen) return s; // 获取 s 目前已占用空间的长度 len = sdslen(s); sh = (void*) (s-(sizeof(struct sdshdr))); // s 最少需要的长度 newlen = (len+addlen); // 根据新长度，为 s 分配新空间所需的大小 if (newlen &lt; SDS_MAX_PREALLOC) // 如果新长度小于 SDS_MAX_PREALLOC // 那么为它分配两倍于所需长度的空间 newlen *= 2; else // 否则，分配长度为目前长度加上 SDS_MAX_PREALLOC newlen += SDS_MAX_PREALLOC; // T = O(N) newsh = zrealloc(sh, sizeof(struct sdshdr)+newlen+1); // 内存不足，分配失败，返回 if (newsh == NULL) return NULL; // 更新 sds 的空余长度 newsh-&gt;free = newlen - len; // 返回 sds return newsh-&gt;buf;&#125; 如何通过sdshdr的buf来找到sdshdr的指针1struct sdshdr *sh = (void*) (s-(sizeof(struct sdshdr)));]]></content>
      <categories>
        <category>redis</category>
        <category>带你搞懂redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>source code</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[redis-memory - 带你搞懂redis]]></title>
    <url>%2Fpost%2F6f0279ba.html</url>
    <content type="text"><![CDATA[zmalloc1234567891011121314151617/** 动态分配大小为size的内存并返回指针*/void *zmalloc(size_t size) &#123; void *ptr = malloc(size+PREFIX_SIZE); if (!ptr) zmalloc_oom_handler(size); //打印错误信息并终止程序#ifdef HAVE_MALLOC_SIZE update_zmalloc_stat_alloc(zmalloc_size(ptr)); return ptr;#else *((size_t*)ptr) = size; //这里是保证内存统计正确 因为malloc会8字节对齐 update_zmalloc_stat_alloc(size+PREFIX_SIZE); return (char*)ptr+PREFIX_SIZE;#endif&#125; zcalloc12345678910111213141516/** 分配内存 calloc 分配的时候会初始化*/void *zcalloc(size_t size) &#123; void *ptr = calloc(1, size+PREFIX_SIZE); if (!ptr) zmalloc_oom_handler(size);#ifdef HAVE_MALLOC_SIZE update_zmalloc_stat_alloc(zmalloc_size(ptr)); return ptr;#else *((size_t*)ptr) = size; update_zmalloc_stat_alloc(size+PREFIX_SIZE); return (char*)ptr+PREFIX_SIZE;#endif&#125; zcalloc 和 zmalloc 的区别在于zcalloc初始化了内存，儿zmalloc没有 zrealloc12345678910111213141516171819202122232425262728void *zrealloc(void *ptr, size_t size) &#123;#ifndef HAVE_MALLOC_SIZE void *realptr;#endif size_t oldsize; void *newptr; if (ptr == NULL) return zmalloc(size);#ifdef HAVE_MALLOC_SIZE oldsize = zmalloc_size(ptr); newptr = realloc(ptr,size); if (!newptr) zmalloc_oom_handler(size); update_zmalloc_stat_free(oldsize); update_zmalloc_stat_alloc(zmalloc_size(newptr)); return newptr;#else realptr = (char*)ptr-PREFIX_SIZE; oldsize = *((size_t*)realptr); newptr = realloc(realptr,size+PREFIX_SIZE); if (!newptr) zmalloc_oom_handler(size); *((size_t*)newptr) = size; update_zmalloc_stat_free(oldsize); update_zmalloc_stat_alloc(size); return (char*)newptr+PREFIX_SIZE;#endif&#125; zfree12345678910111213141516171819void zfree(void *ptr) &#123;#ifndef HAVE_MALLOC_SIZE void *realptr; size_t oldsize;#endif if (ptr == NULL) return;#ifdef HAVE_MALLOC_SIZE update_zmalloc_stat_free(zmalloc_size(ptr)); free(ptr); #else//没有内置malloc函数 realptr = (char*)ptr-PREFIX_SIZE; oldsize = *((size_t*)realptr); update_zmalloc_stat_free(oldsize+PREFIX_SIZE); free(realptr);#endif&#125; 注意HAVE_MALLOC_SIZE这个常量代表了系统是否有可malloc，如果没有的话需要自己手动来求指针指向的内存的大小，所以上面函数都有两种情况。]]></content>
      <categories>
        <category>redis</category>
        <category>带你搞懂redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>source code</tag>
      </tags>
  </entry>
</search>
